n = [[9,7,6],[0,0,0],[2,0,0]]

Afinal = 69
Bfinal = 8
Cfinal = 7

estado =[[8, 1, 4, 3, 5],
                [1, 8, 4, 3, 5],
                [5, 8, 1, 3, 4],
                [5, 1, 8, 3, 4],
                [8, 5, 1, 3, 4],
                [1, 5, 8, 3, 4],
                [8, 1, 5, 3, 4],
                [1, 8, 5, 3, 4],
                [4, 5, 8, 1, 3],
                [4, 5, 1, 8, 3],
                [4, 8, 5, 1, 3],
                [4, 1, 5, 8, 3],
                [4, 8, 1, 5, 3],
                [4, 1, 8, 5, 3],
                [5, 4, 8, 1, 3],
                [5, 4, 1, 8, 3],
                [8, 4, 5, 1, 3],
                [1, 4, 5, 8, 3],
                [8, 4, 1, 5, 3],
                [1, 4, 8, 5, 3],
                [5, 8, 4, 1, 3],
                [5, 1, 4, 8, 3],
                [8, 5, 4, 1, 3],
                [1, 5, 4, 8, 3],
                [8, 1, 4, 5, 3],
                [1, 8, 4, 5, 3],
                [5, 8, 1, 4, 3],
                [5, 1, 8, 4, 3],
                [8, 5, 1, 4, 3],
                [1, 5, 8, 4, 3],
                [8, 1, 5, 4, 3],
                [1, 8, 5, 4, 3],
                [3, 4, 5, 8, 1],
                [3, 4, 5, 1, 8],
                [3, 4, 8, 5, 1],
                [3, 4, 1, 5, 8],
                [3, 4, 8, 1, 5],
                [3, 4, 1, 8, 5],
                [3, 5, 4, 8, 1],
                [3, 5, 4, 1, 8],
                [3, 8, 4, 5, 1],
                [3, 1, 4, 5, 8],
                [3, 8, 4, 1, 5],
                [3, 1, 4, 8, 5],
                [3, 5, 8, 4, 1],
                [3, 5, 1, 4, 8],
                [3, 8, 5, 4, 1],
                [3, 1, 5, 4, 8],
                [3, 8, 1, 4, 5],
                [3, 1, 8, 4, 5],
                [3, 5, 8, 1, 4],
                [3, 5, 1, 8, 4],
                [3, 8, 5, 1, 4],
                [3, 1, 5, 8, 4],
                [3, 8, 1, 5, 4],
                [3, 1, 8, 5, 4],
                [4, 3, 5, 8, 1],
                [4, 3, 5, 1, 8],
                [4, 3, 8, 5, 1],
                [4, 3, 1, 5, 8],
                [4, 3, 8, 1, 5],
                [4, 3, 1, 8, 5],
                [5, 3, 4, 8, 1],
                [5, 3, 4, 1, 8],
                [8, 3, 4, 5, 1],
                [1, 3, 4, 5, 8],
                [8, 3, 4, 1, 5],
                [1, 3, 4, 8, 5],
                [5, 3, 8, 4, 1],
                [5, 3, 1, 4, 8],
                [8, 3, 5, 4, 1],
                [1, 3, 5, 4, 8],
                [8, 3, 1, 4, 5],
                [1, 3, 8, 4, 5],
                [5, 3, 8, 1, 4],
                [5, 3, 1, 8, 4],
                [8, 3, 5, 1, 4],
                [1, 3, 5, 8, 4],
                [8, 3, 1, 5, 4],
                [1, 3, 8, 5, 4],
                [4, 5, 3, 8, 1],
                [4, 5, 3, 1, 8],
                [4, 8, 3, 5, 1],
                [4, 1, 3, 5, 8],
                [4, 8, 3, 1, 5],
                [4, 1, 3, 8, 5],
                [5, 4, 3, 8, 1],
                [5, 4, 3, 1, 8],
                [8, 4, 3, 5, 1],
                [1, 4, 3, 5, 8],
                [8, 4, 3, 1, 5],
                [1, 4, 3, 8, 5],
                [5, 8, 3, 4, 1],
                [5, 1, 3, 4, 8],
                [8, 5, 3, 4, 1],
                [1, 5, 3, 4, 8],
                [8, 1, 3, 4, 5],
                [1, 8, 3, 4, 5],
                [5, 8, 3, 1, 4],
                [5, 1, 3, 8, 4],
                [8, 5, 3, 1, 4],
                [1, 5, 3, 8, 4],
                [8, 1, 3, 5, 4],
                [1, 8, 3, 5, 4],
                [4, 5, 8, 3, 1],
                [4, 5, 1, 3, 8],
                [4, 8, 5, 3, 1],
                [4, 1, 5, 3, 8],
                [4, 8, 1, 3, 5],
                [4, 1, 8, 3, 5],
                [5, 4, 8, 3, 1],
                [5, 4, 1, 3, 8],
                [8, 4, 5, 3, 1],
                [1, 4, 5, 3, 8],
                [8, 4, 1, 3, 5],
                [1, 4, 8, 3, 5],
                [5, 8, 4, 3, 1],
                [5, 1, 4, 3, 8],
                [8, 5, 4, 3, 1],
                [1, 5, 4, 3, 8]]




def filaA(a,b,c):
    return (a*b+c)
def filaB(a,b,c):
    return (a-b+c)
def filaC(a,b,c):
    return (a+b*c)


def columA (a,b,c):
    return(a*b-c)
def columnB (a,b,c):
    return(a+b-c)
def columC(a,b,c):
    return(a+b/c)

def edofinal(n1):
    n= [[9,7,6],[n1[0],n1[1],n1[2]],[2,n1[3],n1[4]]]
    A = filaA(n[0][0],n[0][1],n[0][2])
    B = filaB(n[1][0],n[1][1],n[1][2])
    C = filaC(n[1][0],n[1][1],n[1][2])
    
    if A== Afinal and B==Bfinal and C==Cfinal:
     return 1
    else:
     return 0

def Greedy(estado):
    cont = len(estado) - 1
    if edofinal(estado[cont]):
        print estado[cont]
    else:
        estado.pop()
        Greedy(estado)
                
            

print Greedy(estado)  
            
